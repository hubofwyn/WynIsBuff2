{
  "version": "1.0.0",
  "description": "Intelligent agent orchestration configuration for WynIsBuff2 game development",
  "agents": {
    "architecture-guardian": {
      "description": "Ensures architectural consistency and validates system design decisions",
      "triggers": [
        "new feature implementation",
        "refactoring",
        "module creation",
        "manager implementation",
        "system design review",
        "code organization changes"
      ],
      "patterns": [
        "add.*feature",
        "create.*module",
        "refactor",
        "implement.*manager",
        "design.*system",
        "organize.*code"
      ],
      "priority": 1
    },
    "game-physics-expert": {
      "description": "Expert in Phaser 3 and Rapier physics for 2D platformers",
      "triggers": [
        "physics implementation",
        "collision detection",
        "movement mechanics",
        "jump mechanics",
        "platformer physics",
        "performance optimization"
      ],
      "patterns": [
        "physics",
        "collision",
        "movement",
        "jump",
        "gravity",
        "velocity",
        "rapier",
        "performance.*physics"
      ],
      "priority": 2
    },
    "game-design-innovator": {
      "description": "Creative game design expert for innovative mechanics and gameplay",
      "triggers": [
        "game mechanics",
        "level design",
        "power-ups",
        "game feel",
        "player experience",
        "creative features"
      ],
      "patterns": [
        "mechanic",
        "gameplay",
        "level.*design",
        "power.?up",
        "game.*feel",
        "player.*experience",
        "creative",
        "innovative"
      ],
      "priority": 3
    }
  },
  "workflows": {
    "get-more-buff": {
      "description": "End-to-end orchestration for the get-more-buff flow (events, rewards, factory, determinism, tests, save/load)",
      "steps": [
        { "phase": "events-wiring", "agent": "architecture-guardian", "actions": ["add BOSS_FIRST_CLEAR", "standardize EventBus usage", "normalize forge events"] },
        { "phase": "boss-rewards", "agent": "architecture-guardian", "actions": ["instantiate BossRewardSystem", "unify resource schema", "emit full boss defeat payload"] },
        { "phase": "determinism", "agent": "game-physics-expert", "actions": ["clamp gaussian", "add rng tests"] },
        { "phase": "factory-integration", "agent": "architecture-guardian", "actions": ["drive Factory from EnhancedCloneManager lanes", "visualize decay/effective rate", "EventBus events"] },
        { "phase": "tests", "agent": "architecture-guardian", "actions": ["add real BossRewardSystem integration test", "add lane/Factory integration test", "wire into run-tests.cjs"] },
        { "phase": "save-load", "agent": "architecture-guardian", "actions": ["persist defeated bosses", "persist lanes/boosts centrally"] },
        { "phase": "polish", "agent": "architecture-guardian", "actions": ["gate logs in prod", "alphabetize barrels", "2-space indent"] }
      ]
    },
    "feature-development": {
      "description": "Complete feature development workflow",
      "steps": [
        {
          "phase": "design",
          "agent": "game-design-innovator",
          "actions": ["conceptualize", "prototype mechanics", "define player experience"]
        },
        {
          "phase": "architecture",
          "agent": "architecture-guardian",
          "actions": ["review design", "validate patterns", "ensure consistency"]
        },
        {
          "phase": "implementation",
          "agent": "game-physics-expert",
          "actions": ["implement physics", "optimize performance", "test mechanics"]
        },
        {
          "phase": "validation",
          "agent": "architecture-guardian",
          "actions": ["final review", "pattern compliance", "integration testing"]
        }
      ]
    },
    "bug-fixing": {
      "description": "Systematic bug fixing workflow",
      "steps": [
        {
          "phase": "analysis",
          "agent": "game-physics-expert",
          "condition": "physics-related",
          "actions": ["diagnose issue", "identify root cause"]
        },
        {
          "phase": "solution",
          "agent": "architecture-guardian",
          "actions": ["validate fix approach", "ensure no side effects"]
        }
      ]
    },
    "optimization": {
      "description": "Performance optimization workflow",
      "steps": [
        {
          "phase": "profiling",
          "agent": "game-physics-expert",
          "actions": ["identify bottlenecks", "measure performance"]
        },
        {
          "phase": "optimization",
          "agent": "game-physics-expert",
          "actions": ["optimize algorithms", "improve caching", "reduce computations"]
        },
        {
          "phase": "validation",
          "agent": "architecture-guardian",
          "actions": ["ensure maintainability", "verify no regressions"]
        }
      ]
    },
    "asset-corruption-recovery": {
      "description": "Comprehensive workflow for detecting, handling, and recovering from corrupted image assets",
      "steps": [
        {
          "phase": "detection",
          "agent": "architecture-guardian",
          "actions": ["add asset validation to preloader", "implement corruption detection", "log asset health metrics"]
        },
        {
          "phase": "fallback-system",
          "agent": "architecture-guardian", 
          "actions": ["create placeholder textures", "implement graceful degradation", "add fallback asset mapping"]
        },
        {
          "phase": "recovery",
          "agent": "architecture-guardian",
          "actions": ["add asset reloading mechanism", "implement retry logic", "create asset health monitoring"]
        },
        {
          "phase": "prevention",
          "agent": "architecture-guardian",
          "actions": ["add asset validation script", "implement CI asset checks", "create asset integrity verification"]
        }
      ]
    }
    ,
    "refactor-phase-1": {
      "description": "Unify asset usage across scenes, integrate generated UI, normalize LevelLoader backgrounds, and gate with usage audit + tests",
      "steps": [
        { "phase": "assets-normalize", "agent": "architecture-guardian", "actions": ["replace raw keys", "autoload GEN_* in Preloader", "prune manifest if needed"] },
        { "phase": "scene-unify", "agent": "architecture-guardian", "actions": ["use generated buttons/icons", "ParallaxLayers for RunScene only"] },
        { "phase": "level-loader", "agent": "architecture-guardian", "actions": ["map biomeâ†’parallax constants", "fallback to gradient"] },
        { "phase": "boss-visuals", "agent": "architecture-guardian", "actions": ["display boss sprites/emblem in Results", "wire sprites in boss scenes"] },
        { "phase": "tests-gates", "agent": "architecture-guardian", "actions": ["add Results/LevelLoader tests", "usage audit = 0/0"] }
      ]
    }
    ,
    "phaser4-migration": {
      "description": "Staged migration plan to Phaser 4 with Rapier integration and smoke tests",
      "steps": [
        { "phase": "planning", "agent": "architecture-guardian", "actions": ["freeze phaser3 scenes list", "identify rendering-only surfaces", "define smoke harness"] },
        { "phase": "sandbox", "agent": "architecture-guardian", "actions": ["create phaser4 playground app", "render simple sprite + parallax", "wire rapier"] },
        { "phase": "compat", "agent": "architecture-guardian", "actions": ["port ParallaxLayers to phaser4 api", "map input/events diffs", "verify asset loader paths"] },
        { "phase": "smoke-tests", "agent": "architecture-guardian", "actions": ["headless boot smoke", "parallax smoke", "particle emit smoke"] },
        { "phase": "rollout", "agent": "architecture-guardian", "actions": ["switch branches per scene", "parallel validation", "final cutover"] }
      ]
    }
  },
  "routing": {
    "auto_detect": true,
    "fallback": "architecture-guardian",
    "parallel_execution": {
      "enabled": true,
      "max_agents": 2
    },
    "keywords": {
      "architecture": ["pattern", "structure", "organize", "module", "manager", "singleton", "barrel", "import"],
      "physics": ["collision", "velocity", "gravity", "jump", "movement", "rapier", "physics", "force"],
      "design": ["mechanic", "gameplay", "feel", "experience", "power-up", "level", "creative", "fun"]
    }
  },
  "quality_gates": {
    "pre_implementation": {
      "agent": "architecture-guardian",
      "checks": ["pattern_compliance", "naming_conventions", "import_structure"]
    },
    "post_implementation": {
      "agent": "architecture-guardian",
      "checks": ["test_coverage", "documentation", "event_consistency"]
    }
  },
  "conventions": {
    "enforced_by": "architecture-guardian",
    "rules": [
      "All managers must extend BaseManager",
      "Use barrel exports from @features/*",
      "No magic strings - use constants",
      "Event names follow namespace:action format",
      "Assets managed through manifest.json"
    ]
  }
}
